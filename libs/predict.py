# -*- coding: utf-8 -*-
"""Predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D_jLLhbERfZHkRIMZ6JWXJNuI9XqDihA

# Predict image from model

## Import Lib
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from PIL import Image
import cv2




"""## Load model and input"""

# model = keras.models.load_model("/content/drive/MyDrive/ai_prj/prj_Image Super-Resolution/model/SRCNN_div2k.h5")
# model.load_weights("./content/drive/MyDrive/ai_prj/prj_Image Super-Resolution/checkpoint/srcnn/cp.h5")

def prepare_img(lr,model):
# path = "/content/drive/MyDrive/ai_prj/Cinque_Terre_.jpeg"
  # lr = np.array(lr.convert("RGB"))
  image = tf.expand_dims(lr, axis=0)
  image = tf.cast(image, tf.float32)
  sr = model(image)
  sr = tf.clip_by_value(sr, 0, 255)
  sr = tf.round(sr)
  sr = tf.cast(sr, tf.uint8)
  sr = np.array(sr)
  sr = np.squeeze(sr,axis=0)

  return sr

"""## Prepare input"""


# Random crop image
def rd_crop(lr_img, hr_img, hr_crop_size=96, scale=4):

    lr_crop_size = hr_crop_size // scale
    lr_img_shape = tf.shape(lr_img)[:2]

    lr_width = tf.random.uniform(shape=(), maxval=lr_img_shape[1] - lr_crop_size + 1, dtype=tf.int32)
    lr_height = tf.random.uniform(shape=(), maxval=lr_img_shape[0] - lr_crop_size + 1, dtype=tf.int32)

    hr_height = lr_height * scale
    hr_width = lr_width * scale


    lr_img_cropped = lr_img[lr_height:lr_height + lr_crop_size, lr_width:lr_width + lr_crop_size]
    hr_img_cropped = hr_img[hr_height:hr_height + hr_crop_size, hr_width:hr_width + hr_crop_size]

    iloc = np.array([[(lr_width,lr_height),(lr_width + lr_crop_size, lr_height+lr_crop_size)],[(hr_width,hr_height),(hr_width + hr_crop_size,hr_height+hr_crop_size)]])

    return lr_img_cropped, hr_img_cropped, iloc

"""## Plot result"""

def rd_crop_all(lr_img, hr_img,bicubic, srcnn, edsr, hr_crop_size=96, scale=4):

    lr_crop_size = hr_crop_size // scale
    lr_img_shape = tf.shape(lr_img)[:2]

    lr_width = tf.random.uniform(shape=(), maxval=lr_img_shape[1] - lr_crop_size + 1, dtype=tf.int32)
    lr_height = tf.random.uniform(shape=(), maxval=lr_img_shape[0] - lr_crop_size + 1, dtype=tf.int32)

    hr_height = lr_height * scale
    hr_width = lr_width * scale


    lr_img_cropped = lr_img[lr_height:lr_height + lr_crop_size, lr_width:lr_width + lr_crop_size]
    hr_img_cropped = hr_img[hr_height:hr_height + hr_crop_size, hr_width:hr_width + hr_crop_size]
    bicubic_cropped = bicubic[hr_height:hr_height + hr_crop_size, hr_width:hr_width + hr_crop_size]
    srcnn_cropped = srcnn[hr_height:hr_height + hr_crop_size, hr_width:hr_width + hr_crop_size]
    edsr_cropped = edsr[hr_height:hr_height + hr_crop_size, hr_width:hr_width + hr_crop_size]

    

    iloc = np.array([[(lr_width,lr_height),(lr_width + lr_crop_size, lr_height+lr_crop_size)],[(hr_width,hr_height),(hr_width + hr_crop_size,hr_height+hr_crop_size)]])

    return lr_img_cropped, hr_img_cropped, bicubic_cropped, srcnn_cropped, edsr_cropped, iloc


def plot_results(lr,sr,scale,hr_crop_size=100):

  lr_c, sr_c , iloc= rd_crop(lr,sr,hr_crop_size,scale=scale)

  #fullsize
  plt.figure(figsize=(20,10))
  plt.subplot(1,2,1)
  out_lr = cv2.rectangle(lr.copy(),tuple(iloc[0,0]),tuple(iloc[0,1]),(255, 0, 0),2)
  plt.imshow(out_lr)
  plt.subplot(1,2,2)
  out_sr = cv2.rectangle(sr.copy(),tuple(iloc[1,0]),tuple(iloc[1,1]),(255, 0, 0),8)
  plt.imshow(out_sr)
  # print(tuple(iloc[0,1]),tuple(iloc[0,1]))


  #crop
  plt.figure(figsize=(20,10))
  plt.subplot(1,2,1)
  plt.imshow(lr_c)
  plt.title("Low-resolution")
  plt.subplot(1,2,2)
  plt.imshow(sr_c)
  plt.title("Super-resolution")

def plot_compare_results(lr,hr,bicubic,srcnn,edsr,scale,hr_crop_size=100):

  lr_c, hr_c, sr_bi, sr_srcnn, sr_edsr, iloc= rd_crop_all(lr,hr,bicubic,srcnn,edsr,hr_crop_size,scale=scale)


  #fullsize
  plt.figure(figsize=(10,10))
  out_lr = cv2.rectangle(lr.copy(),tuple(iloc[0,0]),tuple(iloc[0,1]),(255, 0, 0),2)
  plt.imshow(out_lr)
  # print(tuple(iloc[0,1]),tuple(iloc[0,1]))


  #crop
  plt.figure(figsize=(10,10))
  plt.subplot(2,2,1)
  plt.imshow(hr_c)
  
  plt.title("High resolution \n PSNR/SSIM", fontdict={'family': 'sans serif',
        'color':  'black',
        'size': 12})

  plt.subplot(2,2,2)
  psnr_bi = np.round(tf.image.psnr(sr_bi,hr_c,max_val=255).numpy(),3)
  ssim_bi = np.round(tf.image.ssim(sr_bi,hr_c,max_val=1.).numpy(),3)
  plt.imshow(sr_bi)
  plt.title("BICUBIC \n "+str(psnr_bi) + "/"+ str(ssim_bi), fontdict={'family': 'sans serif',
        'color':  'black',
        'size': 12})

  plt.subplot(2,2,3)
  psnr_srcnn = np.round(tf.image.psnr(sr_srcnn,hr_c,max_val=255).numpy(),3)
  ssim_srcnn = np.round(tf.image.ssim(sr_srcnn,hr_c,max_val=1.).numpy(),3)
  plt.imshow(sr_srcnn)
  plt.title("SRCNN  \n "+str(psnr_srcnn )+ "/"+ str(ssim_srcnn), fontdict={'family': 'sans serif',
        'color':  'black',
        'size': 12})


  plt.subplot(2,2,4)
  psnr_edsr = np.round(tf.image.psnr(sr_edsr,hr_c,max_val=255).numpy(),3)
  ssim_edsr = np.round(tf.image.ssim(sr_edsr,hr_c,max_val=1.).numpy(),3)

  plt.imshow(sr_edsr)
  plt.title("EDSR  \n "+str(psnr_edsr) + "/"+ str(ssim_edsr), fontdict={'family': 'sans serif',
        'color':  'black',
        'size': 12})

